{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample documentation for the GSRS api. The api is located at https://ginas.ncats.nih.gov/ginas/app/api/v1",
    "version": "v1",
    "title": "GSRS API",
    "contact": {
      "email": "ginas@mail.nih.gov"
    },
    "license": {
      "name": "APACHE LICENSE, VERSION 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },

  "host": "ginas.ncats.nih.gov",
  "basePath": "/ginas/app/api/v1",
  "produces": ["application/json"],
  "tags": [
    {
      "name": "browse",
      "description": "Browse resources"
    },
    {
      "name": "search text",
      "description": "Search by name, code, or other text fields"
    },
    {
      "name": "search structure",
      "description": "Search by chemical structure"
    },
    {
      "name": "meta search",
      "description": "Search within facets, filters, and suggestion lists"
    },
    {
      "name": "details",
      "description": "Get details of a record"
    },
    {
      "name": "create and update",
      "description": "Create, update, validate and approve records"
    }
  ],
  "schemes": ["https"],
  "securityDefinitions": {
    "auth-username": {
        "name": "auth-username",
        "in": "header",
        "required": "true",
        "type":"apiKey"
      },
      "auth-key": {
        "name": "auth-key",
        "in": "header",
        "required": "true",
        "type":"apiKey"
      }
  },
  "paths": {
    "/": {
      "get": {
        "tags": ["browse"],
        "summary": "Get all resources & operations",
        "description": "Returns high level description of resources, and their supported operations. GSRS supports many high-level resource entities, with substances being the most central resource.",
        "produces": [
          "application/json"
        ],
	    "parameters" : [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances": {
      "get": {
        "tags": ["browse"],
        "summary": "Get all substance records",
        "description": "Returns paging list of substances, wrapped in a response with meta information. View can be expanded or collapsed (e.g. ?view=full for expanded)",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      },
      "post": {
          "tags": ["create and update"],
          "summary": "Create a substance record",
          "description": "Create a new substance record by posting a full JSON record of the substance. This will also perform validation before creation, but will only fail on an \"error\" level validation rule.",
          "consumes": [
            "application/json"
          ],
          "security": [
            {
              "auth-username": [],
              "auth-key": []
            }
          ],
          "parameters":[ {
            "name": "body",
            "description": "json of the substance",
            "type": "application/json",
            "in": "body",
            "required": "true"
          }
          ],
          "responses": {
            "201": {
              "description": "Created"
            },
            "401": {
              "description": "Bad or malformed request"
            },
            "500": {
              "description": "Error in substance validation"
            }
          }
        },
      "put": {
        "tags": ["create and update"],
        "summary": "Update a substance record",
        "description": "Update an existing substance record with a new JSON. This will also perform validation before creation, but will only fail on an \"error\" level validation rule. Note that this update matches substance records based on the \"uuid\" field of the submitted JSON.",
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "auth-username": [],
            "auth-key": []
          }
        ],
        "parameters":[ {
          "name": "body",
          "description": "json of the substance",
          "type": "application/json",
          "in": "body",
          "required": "true"
        }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
              "description": "Bad or malformed request"
          },
          "500": {
              "description": "Error in substance validation"
          }
        }
      }
    },
    "/vocabularies": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get all vocabularies",
        "description": "Returns paging list of vocabularies and terms used in the GSRS system.",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances({id})": {
      "get": {
        "tags": ["details"],
        "summary": "Get a substance by id",
        "description": "Returns a specific substance JSON based on an id. The id is typically the uuid of a record which is simply a randomly generated universally unique id used internally for each substance record. This id is not meant for deep external use, but is flexible for internal use. Unique names and codes can also be used as id elements in these end points.",
	"parameters":[ {
 	  "name": "id",
 	  "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
	}],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({name})": {
      "get": {
        "tags": ["details"],
        "summary": "Get a substance by name",
        "description": "Returns a specific substance JSON based on a unique name.",
	"parameters":[ {
 	  "name": "name",
 	  "description": "A unique name of the substance.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "benzene"
	}],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record name or path not understood"
          }
        }
      }
    },
    "/substances({id})/names": {
      "get": {
        "tags": ["details"],
        "summary": "Get names for a substance",
        "description": "Gets a JSONArray of the names for that substance. Names are objects which include data on the name type, language and other meta data as well as the name strings themselves.",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({uuid})/codes": {
      "get": {
        "tags": ["details"],
        "summary": "Get codes for a substance",
        "description": "Gets a JSONArray of the codes for that substance. Codes include external identifiers for substances, as well as classification and external links used by other substance-related resources.",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/codes($0)": {
      "get": {
        "tags": ["details"],
        "summary": "Get the first code object",
        "description": "Gets the first code object in the codes list for that substance.",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/codes($0)/code": {
      "get": {
        "tags": ["details"],
        "summary": "Get the first code object's code string",
        "description": "Gets the first code object's literal code text string in the codes list for that substance",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/names(type:of)": {
      "get": {
        "tags": ["details"],
        "summary": "Get official names",
        "description": "Gets all \"official\" names for a given substance.",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/names!(name)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of 'name' string",
        "description": "Gets a JSONArray of only the \"name\" literal string for each name in the substance",
          "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/names(type:cn)!(name)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of common names",
        "description": "Gets a JSONArray of only the 'name' string for each name in the substance, only when the name is of \"common name\" type.",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/names(type:cn)!(name)!limit(1)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of first common name",
        "description": "Gets a JSONArray of only the \"name\" string for each name in the substance, only when the name is of \"common name\" type, limiting to 1 value",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/names(type:cn)!(name)!skip(1)!limit(1)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of first common name, skipping first value",
        "description": "Gets a JSONArray of only the 'name' string for each name in the substance, only when the name is of \"common name\" type, skiping the first value, and limiting to 1 value",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/names!sort(created)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of names by creation date (ascending)",
        "description": "Gets a JSONArray of names, sorted by their creation date (ascending)",
       "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/names!revsort(created)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of names by creation date (descending)",
        "description": "Gets a JSONArray of names, sorted by their creation date (descending)",
       "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/names!(createdBy)!distinct()": {
      "get": {
        "tags": ["details"],
        "summary": "JSONArray of users who created a name",
        "description": "Gets a JSONArray of all the distinct users who created a name",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/structure/molfile": {
      "get": {
        "tags": ["details"],
        "summary": "Get molfile for a structure",
        "description": "Gets a JSONString of the molfile for a structure",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/structure/$molfile": {
      "get": {
        "tags": ["details"],
        "summary": "Get raw text for the molfile of a structure",
        "description": "Gets a raw text form of a molfile, with plain text mime type",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/structure!$inchikey()": {
      "get": {
        "tags": ["details"],
        "summary": "Get InChIKey for a structure",
        "description": "Generates an InChIKey for the structure. ['inchikey' is a function that is defined by an extension. Other functions can be provided by implementing a FunctionPath, and adding them to the configuration file]",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/names!count()": {
      "get": {
        "tags": ["details"],
        "summary": "Get name count",
        "description": "Gets the count of names for given record",
          "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
    "/substances({id})/names!group(type)": {
      "get": {
        "tags": ["details"],
        "summary": "Get map of names grouped by name types",
        "description": "Gets a JSONObject which is a map from name types to lists of names that match those types.",
        "parameters":[ {
          "name": "id",
          "description": "An id the substance. This is typically the uuid, but a unique name/code or approvalID will also resolve to the record.",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "0103a288-6eb6-4ced-b13a-849cd7edf028"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Record ID or path not understood"
          }
        }
      }
    },
	"/suggest?q=ibupro": {
      "get": {
        "tags": [
          "search text"
        ],
        "summary": "Get search suggestions from partially typed word \"ibupro\"",
        "description": "Returns a list of suggestions for completing supplied text, grouped by fields where that text was found. This can be used for rapid suggestions for global searches.",
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=ASPIRIN": {
      "get": {
        "tags": ["search text"],
        "summary": "Global search for word \"ASPIRIN\"",
        "description": "Searches (globally) for any substance with 'ASPIRIN' found as a word somewhere in the record. This also returns metadata for top/skip and count information.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=root_approvalID:R16CO5Y76E": {
      "get": {
        "tags": ["search text"],
        "summary": "Search Substance by approvlID, which in the default FDA-seeded system is equivalent to the UNII code.",
        "description": "Searches for a substance with approvalID (UNII) as 'R16CO5Y76E'",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=root_names_name:OXYTOCIN": {
      "get": {
        "tags": ["search text"],
        "summary": "Search for \"OXYTOCIN\" inside of a name",
        "description": "Searches for any substance with \"OXYTOCIN\" found as a word somewhere in a NAME. Returns metadata for top/skip and count information",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=OXYTOCIN%20AND%20root_codes_codeSystem:WIKIPEDIA": {
      "get": {
        "tags": ["search text"],
        "summary": "Substance search for \"OXYTOCIN\" within codes which also have codesystem containing \"WIKIPEDIA\"",
        "description": "Searches for any substance where 'OXYTOCIN' is found as a word somewhere in the record, and there is a code with a codeSystem of 'WIKIPEDIA'",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=root_names_name:\"^OXYTOCIN$\"": {
      "get": {
        "tags": ["search text"],
        "summary": "Exact name Search for \"OXYTOCIN\"",
        "description": "Searches for any substance with \"OXYTOCIN\" is an EXACT name match. The \"^\" character, surrounded by quotes, is used to mean the start of a field. The \"$\" character, also surrounded by quotes, is used to mean the end of a field. Returns metadata for top/skip and count information",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=OXYTO*": {
      "get": {
        "tags": ["search text"],
        "summary": "substance search starting with \"OXYTO\"",
        "description": "Searches for any substance with a word starting with 'OXYTO'",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=ASPIRIN%20ESTER": {
      "get": {
        "tags": ["search text"],
        "summary": "Substance search with words \"ESTER\" or \"ASPIRIN\"",
        "description": "Searches for any substance with the words \"ESTER\" or \"ASPIRIN\" contained (lots of matches).",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=ASPIRIN%20AND%20ESTER": {
      "get": {
        "tags": ["search text"],
        "summary": "Substance search with words \"ESTER\" and \"ASPIRIN\"",
        "description": "Searches for any substance with the words \"ESTER\" AND \"ASPIRIN\" contained in any field (few matches).",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
	"/substances/search?q=*MAB&facet=Substance%20Class%2Fprotein": {
      "get": {
        "tags": ["search text"],
        "summary": "Substance search for words that end in \"MAB\" and are restricted to proteins.",
        "description": "Using facet filters, this search restricts the results to only include records which have \"protein\" as their \"Substance Class\", while also doing a search for words that end in \"MAB\". Note that facet filters can be applied to any search.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
	"/substances/search?q=*MAB&facet=Substance%20Class%2Fprotein&facet=ATC%20Level%201%2FRESPIRATORY%20SYSTEM": {
      "get": {
        "tags": ["search text"],
        "summary": "Substance search for words that end in \"MAB\" and are restricted to proteins with ATC level 1 code in \"RESPRITORY SYSTEM\".",
        "description": "Using facet filters, this search restricts the results to only include records which have \"protein\" as their \"Substance Class\", and \"RESPRITORY SYSTEM\" as their \"ATC Level 1\" facet value. In addition, this also is also doing a search for words that end in \"MAB\". Note that facet filters can be applied to any search.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/structureSearch?q=COCN": {
      "get": {
        "tags": ["search structure"],
        "summary": "Substructure search for SMILES/SMARTS string \"COCN\" -  Async",
        "description": "Searches substances for any structure containing the substructure described by the SMILES string \"COCN\". This is an asynchronous result. Returns a JSONObject with a link and metadata for the full response, as well as a URL for polling if the response has been completed yet or not.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/structureSearch?q=COCN&sync=true": {
      "get": {
        "tags": ["search structure"],
        "summary": "Substructure search for SMILES/SMARTS string \"COCN\" - Sync",
        "description": "Searches substances for any structure containing the substructure described by the SMILES string \"COCN\". This form of the query will block until the search is complete, and then redirect to a resource which contains the results.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/structureSearch?q=CCOC(N)=O&type=sim&cutoff=0.6": {
      "get": {
        "tags": ["search structure"],
        "summary": "Searches for similar structures to SMILES \"CCOC(N)=O\"",
        "description": "Searches substances similar structures to \"CCOC(N)=O\", with tanimoto cutoff of 0.6 (60%). This is an asynchronous result. Returns a JSONObject with a link and metadata for the full response, as well as a URL for polling if the response has been completed yet or not.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/structureSearch?q=CCOC(N)=O&type=exact": {
      "get": {
         "tags": ["search structure"],
        "summary": "Searches substances for structure equivalent to SMILES string \"CCOC(N)=O\".",
        "description": "Searches substances for chemical structures that are tautomerically equivalent to the supplied SMILEs string. This is a stereo sensitive search.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
	"/substances/structureSearch?q=Cl&type=flex": {
      "get": {
         "tags": ["search structure"],
        "summary": "Searches substances for disconnected moiety equivalent to SMILES string \"Cl\".",
        "description": "Searches substances for disconnected moiety equivalent to SMILES string \"Cl\". This is a stereo-insensitive search.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
	"/suggest/@fields": {
      "get": {
        "tags": [
          "meta search"
        ],
        "summary": "get suggest fields",
        "description": "List of suggest fields to help with autocomplete",
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search/@facets?q=ASPIRIN&field=Code+System": {
      "get": {
        "tags": ["meta search"],
        "summary": "Search for \"ASPIRIN\" with \"Code System\" facet",
        "description": "Gets facet value breakdown for facet \"Code System\" in ASPIRIN search.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search/@facets?q=ASPIRIN&field=Code+System&ffilter=W*": {
      "get": {
        "tags": ["meta search"],
        "summary": "Search for \"ASPIRIN\" with \"Code System\" facet values start with \"W\"",
        "description": "Gets facet value breakdown for facet 'Code System' in ASPIRIN search, filtering to only facet values which start with 'W'",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search/@facets?q=ASPIRIN&field=Code+System&ffilter=count:[0%20TO%201]": {
      "get": {
        "tags": ["meta search"],
        "summary": "Search for \"ASPIRIN\" with \"Code System\" facet count between 0 and 1",
        "description": "Gets facet value breakdown for facet \"Code System\" in ASPIRIN search, filtering to only facet values with count between 0 and 1",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/@validate": {
      "post": {
        "tags": [
          "more"
        ],
        "summary": "validate a substance",
        "description": "Validate a substance - returns valid=false for any errors",
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "auth-username": [],
            "auth-key": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "description": "json of the substance",
            "type": "application/json",
            "in": "body",
            "required": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({uuid})/@approve":{
        "get": {
          "tags": [
           "create and update"
          ],
          "summary": "\"approve\" a substance to generate approval ID",
          "description": "Approve/Validate a pending substance to create the approval ID. User can not approve their own substances",
          "consumes": [
            "application/json"
          ],
          "security": [
            {
              "auth-username": [],
              "auth-key": []
            }
          ],
          "parameters": [
            {
              "name": "uuid",
              "description": "uuid of the substance",
              "type": "string",
              "in": "path",
              "required": "true"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response"
            },
            "401": {
              "description": "Bad request"
            },
            "500":{
              "description" : "Server error"
            }
          }
        }
    }
  }
}
