{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample documentation for the GSRS api. The api is located at https://tripod.nih.gov/ginas/app/api/v1",
    "version": "v1",
    "title": "GSRS API",
    "contact": {
      "email": "ginas@mail.nih.gov"
    },
    "license": {
      "name": "NCATS",
      "url": "https://ncats.nih.gov/"
    }
  },

  "host": "tripod.nih.gov",
  "basePath": "/ginas/app/api/v1",
  "produces": ["application/json"],
  "tags": [
    {
      "name": "browse",
      "description": "Browse substances"
    },
    {
      "name": "details",
      "description": "Get details of a substance"
    },
    {
      "name": "search",
      "description": "Search by name or structure"
    },
    {
      "name": "more",
      "description": "Other supported operations"
    }
  ],
  "schemes": ["https"],
  "securityDefinitions": {
    "auth-username": {
        "name": "auth-username",
        "in": "header",
        "required": "true",
        "type":"apiKey"
      },
      "auth-key": {
        "name": "auth-key",
        "in": "header",
        "required": "true",
        "type":"apiKey"
      }
  },
  "paths": {
    "/": {
      "get": {
        "tags": ["browse"],
        "summary": "Get all Resources & Operations",
        "description": "Returns high level description of resources, and their supported operations",
        "produces": [
          "application/json"
        ],
	    "parameters" : [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances": {
      "get": {
        "tags": ["browse"],
        "summary": "Get all Substances",
        "description": "Returns paging list of substances, wrapped in a response with meta information. View can be expanded or collapsed (e.g. ?view=full for expanded)",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      },
      "post": {
          "tags": ["browse"],
          "summary": "post a substance",
          "description": "create a new substance",
          "consumes": [
            "application/json"
          ],
          "security": [
            {
              "auth-username": [],
              "auth-key": []
            }
          ],
          "parameters":[ {
            "name": "body",
            "description": "json of the substance",
            "type": "application/json",
            "in": "body",
            "required": "true"
          }
          ],
          "responses": {
            "200": {
              "description": "Successful response"
            },
            "201": {
              "description": "Created"
            },
            "401": {
              "description": "Bad request"
            },
            "500": {
              "description": "Duplicate Substance"
            }
          }
        },
      "put": {
        "tags": ["browse"],
        "summary": "update a substance",
        "description": "update an existing substance",
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "auth-username": [],
            "auth-key": []
          }
        ],
        "parameters":[ {
          "name": "body",
          "description": "json of the substance",
          "type": "application/json",
          "in": "body",
          "required": "true"
        }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Error updating record"
          }
        }
      }
    },
    "/structures": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get all Structures",
        "description": "Returns paging list of Structures",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances({id})": {
      "get": {
        "tags": ["details"],
        "summary": "Get a substance by id",
        "description": "Returns a specific substance JSON. OData-like syntax",
	"parameters":[ {
 	  "name": "id",
 	  "description": "The id of the substance",	
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
	}],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances/{id}": {
      "get": {
        "tags": ["details"],
        "summary": "Get a substance by id - alternative",
        "description": "Alternative syntax for above. NOT PREFERRED",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names": {
      "get": {
        "tags": ["details"],
        "summary": "Get names for a substance",
        "description": "Gets a JSONArray of the names for that substance",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/codes": {
      "get": {
        "tags": ["details"],
        "summary": "Get codes for a substance",
        "description": "Gets a JSONArray of the codes for that substance",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/codes($0)": {
      "get": {
        "tags": ["details"],
        "summary": "Get the first code object",
        "description": "Gets the first code object in the codes list for that substance",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/codes($0)/code": {
      "get": {
        "tags": ["details"],
        "summary": "Get the first code object's code string",
        "description": "Gets the first code object's code string in the codes list for that substance",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names(type:of)": {
      "get": {
        "tags": ["details"],
        "summary": "Get official names",
        "description": "Gets all official names for a given substance",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names!(name)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of 'name' string",
        "description": "Gets a JSONArray of only the 'name' string for each name in the substance",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names(type:cn)!(name)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of common names",
        "description": "Gets a JSONArray of only the 'name' string for each name in the substance, only when the name is common",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names(type:cn)!(name)!limit(1)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of first common name",
        "description": "Gets a JSONArray of only the 'name' string for each name in the substance, only when the name is common, limiting to 1 value",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names(type:cn)!(name)!skip(1)!limit(1)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of first common name- skip first value",
        "description": "Gets a JSONArray of only the 'name' string for each name in the substance, only when the name is common, skiping the first value, and limiting to 1 value",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names!sort(created)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of names by creation date (ascending)",
        "description": "Gets a JSONArray of names, sorted by their creation date (ascending)",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names!revsort(created)": {
      "get": {
        "tags": ["details"],
        "summary": "Get JSONArray of names by creation date (descending)",
        "description": "Gets a JSONArray of names, sorted by their creation date (descending)",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names!(createdBy)!distinct()": {
      "get": {
        "tags": ["details"],
        "summary": "JSONArray of users who created a name",
        "description": "Gets a JSONArray of all the distinct users who created a name",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/structure/molfile": {
      "get": {
        "tags": ["details"],
        "summary": "Get smiles for a structure",
        "description": "Gets a JSONString of the smiles for a structure",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/structure/$molfile": {
      "get": {
        "tags": ["details"],
        "summary": "Get raw text for a structure",
        "description": "Gets a raw text form of a molfile",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/structure!$inchikey()": {
      "get": {
        "tags": ["details"],
        "summary": "Get InChIKey for a structure",
        "description": "Generates an InChIKey for the structure. ['inchikey' is a function that is defined by an extension. Other functions can be provided by implementing a FunctionPath, and adding them to the conf file]",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names!count()": {
      "get": {
        "tags": ["details"],
        "summary": "Get name count",
        "description": "Gets count of names for given record",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({id})/names!group(type)": {
      "get": {
        "tags": ["details"],
        "summary": "Get map of names grouped by name types",
        "description": "Gets a JSONObject which is a map from name types to lists of names that match those types",
        "parameters":[ {
          "name": "id",
          "description": "The id of the substance",
          "type": "string",
          "in": "path",
          "required": "true",
          "default": "000526f6-fb3b-46e5-bd38-14e2d83bebd4"
        }],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances/search?q=ASPIRIN": {
      "get": {
        "tags": ["search"],
        "summary": "Global search for 'ASPIRIN'",
        "description": "Searches (globally) for any substance with 'ASPIRIN' found as a word somewhere in the record. Returns metadata for top/skip and count information",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search/@facets?q=ASPIRIN&field=Code+System": {
      "get": {
        "tags": ["search"],
        "summary": "Search for 'ASPIRIN' with 'Code System' facet",
        "description": "Gets facet value breakdown for facet 'Code System' in ASPIRIN search.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search/@facets?q=ASPIRIN&field=Code+System&ffilter=W*": {
      "get": {
        "tags": ["search"],
        "summary": "Search for 'ASPIRIN' with 'Code System' facet values start with 'W'",
        "description": "Gets facet value breakdown for facet 'Code System' in ASPIRIN search, filtering to only facet values which start with 'W'",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search/@facets?q=ASPIRIN&field=Code+System&ffilter=count:[0%20TO%201]": {
      "get": {
        "tags": ["search"],
        "summary": "Search for 'ASPIRIN' with 'Code System' facet count between 0 and 1",
        "description": "Gets facet value breakdown for facet 'Code System' in ASPIRIN search, filtering to only facet values with count between 0 and 1",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=root_names_name:OXYTOCIN": {
      "get": {
        "tags": ["search"],
        "summary": "Search for 'OXYTOCIN' as a name",
        "description": "Searches for any substance with 'OXYTOCIN' found as a word somewhere in a NAME. Returns metadata for top/skip and count information",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=OXYTOCIN%20AND%20root_codes_codeSystem:WIKIPEDIA": {
      "get": {
        "tags": ["search"],
        "summary": "substance search for 'OXYTOCIN' with codesystem 'WIKIPEDIA'",
        "description": "Searches for any substance where 'OXYTOCIN' is found as a word somewhere in the record, and there is a code with a codeSystem of 'WIKIPEDIA'",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=root_names_name:\"^OXYTOCIN$\"": {
      "get": {
        "tags": ["search"],
        "summary": "Exact name Search for 'OXYTOCIN'",
        "description": "Searches for any substance with 'OXYTOCIN' is an EXACT name match. Returns metadata for top/skip and count information",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=OXYTO*": {
      "get": {
        "tags": ["search"],
        "summary": "substance search starting with 'OXYTO'",
        "description": "Searches for any substance with a word starting with 'OXYTO'",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=ASPIRIN%20ESTER": {
      "get": {
        "tags": ["search"],
        "summary": "substance search with words 'ESTER' or 'ASPIRIN'",
        "description": "Searches for any substance with the words 'ESTER' or 'ASPIRIN' contained (lots of matches)",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/search?q=ASPIRIN%20AND%20ESTER": {
      "get": {
        "tags": ["search"],
        "summary": "substance search with words 'ESTER' and 'ASPIRIN'",
        "description": "Searches for any substance with the words 'ESTER' AND 'ASPIRIN' contained (few matches)",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/structureSearch?q=COCN": {
      "get": {
        "tags": ["search"],
        "summary": "Substructure search for 'COCN' -  Asynch",
        "description": "Searches substances for any substructure 'COCN'. This is an asynchronous result. Returns a JSONObject with a link and metadata for the full response, as well as a URL for polling if the response has been completed yet or not.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/structureSearch?q=COCN&sync=true": {
      "get": {
        "tags": ["search"],
        "summary": "Substructure search for 'COCN' - Synch",
        "description": "Searches substances for any substructure 'COCN'. This form of the query will block until the search is complete, and then redirect to a resource which contains the results.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/structureSearch?q=CCOC(N)=O&type=sim&cutoff=0.6": {
      "get": {
        "tags": ["search"],
        "summary": "similar structures search for 'CCOC(N)=O'",
        "description": "Searches substances similar structures to 'CCOC(N)=O', with tanimoto cutoff of 0.6. This is an asynchronous result. Returns a JSONObject with a link and metadata for the full response, as well as a URL for polling if the response has been completed yet or not.",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/structureSearch?q=CCOC(N)=O&type=exact": {
      "get": {
        "tags": ["search"],
        "summary": "similar structures search for 'CCOC(N)=O'- exact",
        "description": "Searches substances similar structures to 'CCOC(N)=O'",
        "parameters":[],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/substances/@validate": {
      "post": {
        "tags": [
          "more"
        ],
        "summary": "validate a substance",
        "description": "Validate a substance - returns valid=false for any errors",
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "auth-username": [],
            "auth-key": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "description": "json of the substance",
            "type": "application/json",
            "in": "body",
            "required": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Bad request"
          }
        }
      }
    },
    "/substances({UUID})/@approve":{
        "get": {
          "tags": [
            "more"
          ],
          "summary": "approve a substance",
          "description": "Approve a pending substance - User can not approve their own substances",
          "consumes": [
            "application/json"
          ],
          "security": [
            {
              "auth-username": [],
              "auth-key": []
            }
          ],
          "parameters": [
            {
              "name": "uuid",
              "description": "uuid of the substance",
              "type": "string",
              "in": "path",
              "required": "true"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response"
            },
            "401": {
              "description": "Bad request"
            },
            "500":{
              "description" : "Exception"
            }
          }
        }
    },
    "/suggest/@fields": {
      "get": {
        "tags": [
          "more"
        ],
        "summary": "get suggest fields",
        "description": "List of suggest fields to help with autocomplete",
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    }
  }
//,
/*  "definitions" : {
   }*/
}
